// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    And(a=instruction[15], b=instruction[5], out=aluOutToA);
    Mux16(a=instruction, b=aluOut, sel=aluOutToA, out=aluM);
    Not(in=instruction[15], out=isA);
    Or(a=aluOutToA, b=isA, out=aLoad);
    ARegister(in=aluM, load=aLoad, out=A, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[4], out=dLoad);
    DRegister(in=aluOut, load=dLoad, out=D);
    Mux16(a=A, b=inM, sel=instruction[12], out=AM);
    ALU(
        x=D,
        y=AM,
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=outM,
        out=aluOut,
        zr=aluOutZero, 
        ng=aluOutNegative
    );

    // メモリへの書き込みを有無を決定
    And(a=instruction[15], b=instruction[3], out=writeM);


    // ジャンプの有無を決定
    And(a=instruction[2], b=aluOutNegative, out=ngJump);
    And(a=instruction[1], b=aluOutZero, out=zrJump);
    Or(a=ngJump, b=zrJump, out=ngOrZrJump);

    Or(a=aluOutNegative, b=aluOutZero, out=isNegativeOrZero);
    Not(in=isNegativeOrZero, out=isPositive);
    And(a=isPositive, b=instruction[0], out=psJump);

    Or(a=ngOrZrJump, b=psJump, out=isJump);
    And(a=instruction[15], b=isJump, out=pcLoad);

    // PCのセット
    PC(in=A, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);
}
