// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    And(a=instruction[0], b=instruction[10], out=aluOutToA)
    Mux16(a=instruction, b=aluOut, sel=aluOutToA, out=aluM)
    Not(in=instruction[0], out=isA)
    Or(a=aluOutToA, b=isA, out=aLoad)
    ARegister(in=aluM, load=aLoad, out=A, out=addressM)

    DRegister(in=aluOut, load=instruction[11], out=D)
    Mux16(a=A, b=inM, sel=instruction[3], out=AM)
    ALU(
        x=D,
        y=AM,
        zx=instruction[4], 
        nx=instruction[5], 
        zy=instruction[6], 
        ny=instruction[7], 
        f=instruction[8], 
        no=instruction[9], 
        out=outM,
        out=aluOut
        zr=aluOutZero, 
        ng=aluOutNegative
    );

    // メモリへの書き込みを有無を決定
    And(a=instruction[12], b=instruction[12], out=writeM);


    // ジャンプの有無を決定
    And(a=instruction[13], b=aluOutNegative, out=ngLoad);
    And(a=instruction[14], b=aluOutZero, out=zrLoad);
    Or(a=ngAnd, b=zrAnd, out=ngOrzr);
    Not(in=ngOrzr, out=ngOrzrNot);
    And(a=instruction[15], b=ngOrzrNot, out=psLoad);
    Or(a=ngOrZr, b=psLoad, out=pcLoad);
    
    // PCのインクリメントを決定
    Not(in=pcLoad, out=pcInc)

    // PCのセット
    PC(in=A, load=pcLoad, inc=pcInc, reset=reset, out=pc[1..15])
}
